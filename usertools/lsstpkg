#! /usr/bin/env python
#
import sys
import os
import os.path
import re
import textwrap
import optparse as op
import urllib2

# if not os.environ.has_key('EUPS_DIR'):
#     print >> sys.stderr, "EUPS_DIR environment variable not set;"
#     print >> sys.stderr, "  please load the LSST environment."
#     sys.exit(1)

sys.path.append(os.path.join(os.environ['EUPS_DIR'], "bin"))
import eups

pmnotfound = re.compile(r"Package \[[^\]]*\] found in \[[^\]]*\]")
pmcantfind = re.compile(r"Can't find \[");
pmfound = re.compile(r"\[\*\] ");

def main():
    
    # note: cl will be global
    (opts, args) = cl.parse_args()
    args = map(lambda x: x.lower(), args)

    if len(args) == 0:
        showhelp()
        sys.exit(1)
    if opts.wanthelp:
        showhelp(args)
        sys.exit(0)

    # factory code for handling operation
    # cmds = { 'fetch' : Fetch, 'remove' : Remove }
    cmd = None
    for cmdname in cmds:
        if cmdname.startswith(args[0]):
            cmd = cmds[cmdname]
            break

    if cmd is None:
        if not opts.quiet:
            print >> sys.stderr, cl.prog + ": unrecognized command", args[0]
        sys.exit(1)
    cmd = cmd(cl, cmdname)
        
    # command will exit itself
    cmd.run()

def showhelp(args = None):
    if args is None or len(args) < 1 or args[0] not in cmds.keys():
        cl.print_help()
        print 
        print fmtCmds()
    else:
        print cmds[args[0]].usage % (os.path.basename(cl.prog), args[0])
        print
        print textwrap.fill(textwrap.dedent(cmds[args[0]].__doc__).strip(), 78)
        print
        print cl.format_option_help()
    
def fmtCmds():
    out = ["Commands:"]
    for cmd in cmds:
        what = ("\n" + " " * 19).join(textwrap.wrap(cmdbrief(cmds[cmd]),60))
        out.append("  %-13s  %s" % (cmd, what))
    out.append("")
    out.append("Use -h with the command name to get more info on a specific " +
               "command")
    return "\n".join(out)

def cmdbrief(cmd):
    """return the brief definition of a commands functionality.  This
    returns the @@brief tag value, if it exists, or the first sentence from
    the command's documentation string.
    """
    doc = textwrap.dedent(cmd.__doc__)
    brief = doc.find('@brief')
    if brief < 0:  brief = doc.find('\brief')
    if brief >= 0:  doc = doc[brief+6:]
    doc = doc.strip()

    brief = doc.find('.  ')
    if brief < 0:  brief = doc.find('.')
    if brief >= 0:  doc = doc[:brief+1]

    return " ".join(textwrap.wrap(doc, 77))

class Error(Exception):
    def __init__(self, message):
        self.message = message

def list(product, version = "", dbz = "", flavor = ""):
    """Return a list of declared versions of a product; if the
    version is specified, just return the properties of that version.

    This gets around a bug in the eups module.

    The return value for each product is a list:
       (version, database, directory, isCurrent, isSetup)
    """

    opts = ""
    if dbz:
        opts += " --select-db %s" % (dbz)
    if flavor:
        opts += " --flavor %s" % (flavor)

    result = []
    for info in os.popen("eups list %s --verbose %s %s" % (opts, product, version)).readlines():
        oneResult = re.findall(r"\S+", info)

        if len(oneResult) < 4: oneResult += [False]
        if len(oneResult) < 5: oneResult += [False]

        if oneResult[3] == "Setup" or oneResult[4] == "Setup":
            oneResult[4] = True
        else:
            oneResult[4] = False
            
        if oneResult[3] == "Current":
            oneResult[3] = True
        else:
            oneResult[3] = False
            
        result += [oneResult]

        if version:
            return oneResult
        
    return result

class Cmd:
    """a parent class for handling a sub-command"""
    def __init__(self, cmdline, cmdname=None):
        self.prog = cmdline.prog
        (self.opts, self.args) = cl.parse_args()
        self.name = cmdname
        if self.name is None or len(self.name) == 0:
            self.name = self.args[0]

    def _ignoringExtraArgs(self, maxArgCount):
        """print a message about ignoring extra arguments.
        @param maxArgCount  the maximum number of arguments needed after the
                              sub-command
        """
        if len(self.args) > maxArgCount+1 and not self.opts.quiet:
            print >> sys.stderr, \
                  "%s: Ignoring extra arguments: %s" %  \
                  (self.name, " ".join(arg[maxArgCount+1:]))

    def _cmdargs(self):
        self._ignoringExtraArgs(0)
        return ()

    def die(self, message):
        if not self.opts.quiet: print >> sys.stderr, self.prog + ":", message
        sys.exit(1)

    def run(self):
        raise Error("No run implementation provided")

    def getCurrentVerData(self, pkg):
        """consult the software server and return the data describing the
        current verison of a given package.
        @param pkg   the package to inquire about
        """
        pkgpat = re.compile(r'%s\s' % pkg)

        cururl = "%s/current.list" % os.environ["EUPS_PKGROOT"]
        curlist = urllib2.urlopen(cururl)
        desc = filter(lambda x: pkgpat.match(x), curlist.readlines())
        curlist.close()
        
        if len(desc) == 0:
            raise Error(pkg + ": unknown package")
        desc = desc[0].split()
        if len(desc) <= 2:
            raise Error(pkg + ": current version not set")
        if len(desc) <= 3:  desc.append('')
        if len(desc) <= 4:  desc.append('')
        return (desc[2], desc[3], desc[4])
        
class Fetch(Cmd):
    """
    Download and install a distribution package from the LSST software
    server and install it locally into the primary software stack (i.e. 
    under the first directory in the EUPS_PATH).  If version is omitted,
    the version considered current will be returned.
    """

    usage = "usage: %s [ -hsvncN ] %s package [ version ]"

    def _cmdargs(self, args):
        self._ignoringExtraArgs(2)
        pkg = None
        ver = None
        if len(args) > 1: pkg = args[1]
        if len(args) > 2: ver = args[2]
        return (pkg, ver)

    def run(self):
        cmd = "eups distrib -i -C".split()
        (pkg, version) = self._cmdargs(self.args)
        if self.opts.prefflavor:
            cmd.append("-b")

        if pkg is None:
            self.die(self.name + ": No package name given")

        cmd.append(pkg)
        if version is not None:
            cmd.append(version)

        if version is None:
            if self.opts.docurrent is None:
                self.opts.docurrent = True
                
            # predict the version we'll get if not specified
            try:
                version = self.getCurrentVerData(pkg)[0]
            except Error:
                pass

        # should this new package be made current?
        # Note: once version requirements are built into eups, this will need
        # to change
        if not self.opts.docurrent:
            curver = eups.current(pkg);

            # this gets around a bug in eups.current()
            if curver == 'No': curver = ''
            
            if len(curver) > 0:
                # return the previous current version to its special status
                cmd.extend((" && eups declare -c %s %s" %
                            (pkg, curver)).split())
            elif self.opts.docurrent is not None:
                # there was no previous current, so try to unset the current
                if version is not None:
                    cmd.extend((" && eups undeclare --current %s %s" %
                                (pkg, version)).split())

        if not self.opts.quiet: print >> sys.stderr, " ".join(cmd)
        if self.opts.verbose > 0:
            if not self.opts.docurrent:
                if version is None: version = "<version>"
                print >> sys.stderr, \
                          ("Use 'eups declare -c %s %s' to set this " + 
                           "as your current version.") % (pkg, version)
        if not self.opts.quiet: print >> sys.stderr

        # run the command and exit
        if not self.opts.noop: os.execvp(cmd[0], cmd)
        sys.exit(0);

class Remove(Cmd):
    """
    remove a previously downloaded package.  The package need not have been
    installed successfully for this command to be effective.  Use -v to 
    actually see the commands executed run this command.

    The --current (-c) and --not-current (-N) options are ignored by this
    command.
    """

    usage = "usage: %s [ -hsvncN ] %s package version"

    def _cmdargs(self, args):
        self._ignoringExtraArgs(2)
        pkg = None
        ver = None
        if len(args) > 1: pkg = args[1]
        if len(args) > 2: ver = args[2]
        return (pkg, ver)

    def run(self):
        listcmd = "pacman -l %s-%s"
        cmd = "pacman -remove LSST:%s"
        (pkg, version) = self._cmdargs(self.args)

        if pkg is None:
            self.die(self.name + ": No package name given")

        if version is None:
            # we need the version; show which ones we know about
            vers = list(pkg)
            if not self.opts.quiet:
                if len(vers) > 1:
                    thevers = ", ".join(map(lambda x: x[0], vers))
                else:
                    thevers = "(none found in EUPS)"
                print >> sys.stderr, "Not sure which version to remove:", \
                      thevers
                print >> sys.stderr, "Rerun this command, specifying the",\
                      "version to delete after the package name."
            self.die("aborting");

        # get the directory where it is actually installed so we can be sure
        # to get it deleted
        instdir = list(pkg, version)
        if len(instdir) > 1:
            instdir = instdir[2]
        else:
            instdir = None

        listcmd = listcmd % (pkg, version)

        # this has be done from the LSST_PKGS directory
        if not os.environ.has_key('EUPS_PATH'):
            self.die(self.name + ": EUPS_PATH environment variable not set;" +
                "\n  please load the LSST environment")
        eupspath = re.sub(r':.*$','', os.environ['EUPS_PATH'])
        flavpath = "%s/%s" % (eupspath, eups.flavor())

        # figure out the most likely installation location.  for eups 0.7.31
        # or earlier, this will be $LSST_PKGS; otherwise it should be LSST
        # the first element in EUPS_PATH.
        dirs = []
        if os.path.exists("%s/o..pacman..o" % flavpath):
            dirs.append(flavpath)
        if os.path.exists("%s/o..pacman..o" % eupspath):
            dirs.append(eupspath)
        if (len(dirs) == 0 and os.environ.has_key('PWD') and
            os.path.exists("%s/o..pacman..o" % os.environ["PWD"])):
            dirs.append(os.environ["PWD"])

        stat = 0
        success = False
        if len(dirs) == 0:
            print >> sys.stderr, \
                "Warning: unable to locate pacman database (o..pacman..o)."
        else: 
            for dir in dirs:
                listout = os.popen("cd %s && %s 2>&1" % (dir, listcmd), 'r')
                for line in listout:
                    if pmfound.match(line):
                        # found the package in this directory; remove it
                        pmpkg = pmfound.sub('', line);
                        rmcmd = ("cd %s && " + cmd) % (dir, pmpkg)

                        # if desired, print the commands that can be used to 
                        # do this manually
                        if not self.opts.quiet:
                            print >> sys.stderr, \
                                  "Removing %s %s..." % (pkg, version)
                        if self.opts.noop or self.opts.verbose > 0:
                            print >> sys.stderr, "cd", dir
                            print >> sys.stderr, cmd % pmpkg
                        if not self.opts.quiet:
                            print >> sys.stderr
            
                        # run the command and exit
                        if not self.opts.noop:
                            cmdout = os.popen(rmcmd,'r')
                            for rmline in cmdout:
                                if pmnotfound.match(rmline): success = False
                                if not self.opts.quiet:
                                    print >> sys.stderr, rmline.rstrip()
                            stat = cmdout.close()
                            if stat is None:
                                success = True
                                stat = 0
                            else:
                                print >> sys.stderr, \
                                    "warning: possible problem running '%s'" % \
                                    rmcmd
                listout.close()

                # if it looks like pacman removed the package, don't bother
                # going on.
                if success and not self.opts.noop:
                    if not self.opts.quiet:
                        print >> sys.stderr, ("Package %s %s removed from %s" % 
                                              (pkg, version, dir))
                    break

        # now delete the actual installation dir, if necessary
        if instdir is not None and os.path.exists(instdir):
            if not self.opts.quiet:
                if not success:
                    print >> sys.stderr, "eups undeclare %s %s" % (pkg, version)
                print >> sys.stderr, "rm -rf %s" % instdir

            if not self.opts.noop:
                if not success:
                    os.system("eups undeclare %s %s" % (pkg, version))
                    if os.system("rm -rf %s" % instdir) != 0:
                        self.die("Failed to remove %s" % instdir)

        sys.exit(stat / 256)


class GetTable(Cmd):
    """
    Update the EUPS table file from the software server for a given package.
    This is mainly used for retrieving updated table files for 3rd-party
    packages. 

    The --current (-c) and --not-current (-N) options are ignored by this
    command.
    """

    usage = "usage: %s [ -hsvn ] %s package [ version ]"

    def _cmdargs(self, args):
        self._ignoringExtraArgs(2)
        pkg = None
        ver = None
        if len(args) > 1: pkg = args[1]
        if len(args) > 2: ver = args[2]
        return (pkg, ver)

    def run(self):
        cmd = "curl -o".split()
        (pkg, version) = self._cmdargs(self.args)

        if pkg is None:
            self.die(self.name + ": No package name given")
        if not os.environ.has_key("EUPS_PKGROOT"):
            self.die("EUPS_PKGROOT not set; please load the LSST environment")

        # get information from the server about package
        try:
            (curver, subdir, svrdir) = self.getCurrentVerData(pkg)
        except Exception, e:
            self.die(e.message)

        if version is None:
            # we will assume that the table file for the current version
            # is wanted; look this version up.  
            version = curver

        cmd = "curl -o %s/"
        if len(subdir) > 0:  cmd += "%s/" % subdir
        cmd += "%s/%s/ups/%s.table %%s/" % (pkg, version, pkg)
#        cmd += " %s/" % os.environ["EUPS_PKGROOT"]
        if len(subdir) > 0:  cmd += "%s/" % subdir
        if len(svrdir) > 0:
            if curver != version:
                svrdir = re.sub('/%s/' % curver, '/%s/' % version, svrdir)
            cmd += svrdir
        else:
            cmd += "%s/%s" % (pkg, version)
        cmd += "/%s.table" % pkg

        if not self.opts.quiet:
            print >> sys.stderr, cmd % ("$LSST_PKGS", "$EUPS_PKGROOT")

        if not self.opts.noop:
            lsst_pkgs = "%s/%s" % (os.environ["LSST_HOME"], eups.flavor())
            cmd = cmd % (lsst_pkgs, os.environ["EUPS_PKGROOT"])
            cmd = cmd.split()
            os.execvp(cmd[0], cmd)
        sys.exit(0)


cmds = { 'fetch' : Fetch, 'remove' : Remove, 'gettable': GetTable }

# set up the command line parser
cl = op.OptionParser(usage="%prog [ -qvh ] args", conflict_handler="resolve",
                     description="short-cut commands for installing packages",
                     prog=sys.argv[0])
cl.add_option("-q", "--quiet",
              action="store_true", dest="quiet",
              help="do not show user commands being run")
cl.add_option("-v", "--verbose",
              action="store_const", const=1, dest="verbose", default=0,
              help="print extra messages about what's going on.")
cl.add_option("-n", "--noop",
              action="store_true", dest="noop", default=False,
              help="do not actually execute command, just talk about it.")
cl.add_option("-b", "--prefer-flavor",
              action="store_true", dest="prefflavor", default=False,
              help="Retrieve platform-specific distributions when available (short option mnumonic: binary).")
cl.add_option("-c", "--current",
              action="store_const", dest="docurrent", const=True, default=None,
              help="Force the newly installed package to be marked current.")
cl.add_option("-N", "--not-current",
              action="store_const", dest="docurrent", const=False, default=None,
              help="Prevent the newly installed package from being marked current.")
cl.add_option("-h", "--help",
              action="store_true", dest="wanthelp", default=False,
              help="print this help information")

if __name__ == '__main__':
    main()
